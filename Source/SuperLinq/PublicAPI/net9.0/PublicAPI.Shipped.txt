#nullable enable
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6, TAccumulate7 seed7, System.Func<TAccumulate7, T, TAccumulate7>! accumulator7, TAccumulate8 seed8, System.Func<TAccumulate8, T, TAccumulate8>! accumulator8, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6, TAccumulate7 seed7, System.Func<TAccumulate7, T, TAccumulate7>! accumulator7, TAccumulate8 seed8, System.Func<TAccumulate8, T, TAccumulate8>! accumulator8) -> (TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6, TAccumulate7 seed7, System.Func<TAccumulate7, T, TAccumulate7>! accumulator7, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6, TAccumulate7 seed7, System.Func<TAccumulate7, T, TAccumulate7>! accumulator7) -> (TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, TAccumulate6 seed6, System.Func<TAccumulate6, T, TAccumulate6>! accumulator6) -> (TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, TAccumulate5 seed5, System.Func<TAccumulate5, T, TAccumulate5>! accumulator5) -> (TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, TAccumulate4 seed4, System.Func<TAccumulate4, T, TAccumulate4>! accumulator4) -> (TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3, System.Func<TAccumulate1, TAccumulate2, TAccumulate3, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TAccumulate3>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, TAccumulate3 seed3, System.Func<TAccumulate3, T, TAccumulate3>! accumulator3) -> (TAccumulate1, TAccumulate2, TAccumulate3)
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2, System.Func<TAccumulate1, TAccumulate2, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Aggregate<T, TAccumulate1, TAccumulate2>(this System.Collections.Generic.IEnumerable<T>! source, TAccumulate1 seed1, System.Func<TAccumulate1, T, TAccumulate1>! accumulator1, TAccumulate2 seed2, System.Func<TAccumulate2, T, TAccumulate2>! accumulator2) -> (TAccumulate1, TAccumulate2)
static SuperLinq.SuperEnumerable.AggregateBy<TSource, TKey, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TAccumulate>! seedSelector, System.Func<TAccumulate, TSource, TAccumulate>! func, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>!
static SuperLinq.SuperEnumerable.AggregateBy<TSource, TKey, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! func, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>!
static SuperLinq.SuperEnumerable.AggregateRight<TSource, TAccumulate, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func, System.Func<TAccumulate, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.AggregateRight<TSource, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func) -> TAccumulate
static SuperLinq.SuperEnumerable.AggregateRight<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! func) -> TSource
static SuperLinq.SuperEnumerable.AssertCount<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.AtLeast<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> bool
static SuperLinq.SuperEnumerable.AtMost<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> bool
static SuperLinq.SuperEnumerable.Backsert<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, int index) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Batch<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Batch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.BindByIndex<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEnumerable<int>! indices, System.Func<TSource, int, TResult>! resultSelector, System.Func<int, TResult>! missingSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.BindByIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEnumerable<int>! indices) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, int skip) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh, System.Collections.Generic.IEnumerable<T8>! eighth, System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7, T8>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh, System.Collections.Generic.IEnumerable<T8>! eighth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4, T5, T6, T7, T8)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh, System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, T7>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Collections.Generic.IEnumerable<T7>! seventh) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4, T5, T6, T7)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth, System.Func<T1, T2, T3, T4, T5, T6, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, T6>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Collections.Generic.IEnumerable<T6>! sixth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4, T5, T6)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth, System.Func<T1, T2, T3, T4, T5, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, T5>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Collections.Generic.IEnumerable<T5>! fifth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4, T5)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Func<T1, T2, T3, T4, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1, T2, T3, T4)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Func<T1, T2, T3, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1, T2, T3)>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Func<T1, T2, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Cartesian<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1, T2)>!
static SuperLinq.SuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IEnumerable<TResult>!>! sources) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IEnumerable<TResult>!>! sources, System.Collections.Generic.IEnumerable<TResult>! defaultSource) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Catch<TSource, TException>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TException!, System.Collections.Generic.IEnumerable<TSource>!>! handler) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Catch<TSource>(params System.Collections.Generic.IEnumerable<TSource>![]! sources) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Catch<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! sources) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Catch<TSource>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Choose<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, (bool, TResult)>! chooser) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.CollectionEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second) -> bool
static SuperLinq.SuperEnumerable.CollectionEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> bool
static SuperLinq.SuperEnumerable.CompareCount<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> int
static SuperLinq.SuperEnumerable.Consume<T>(this System.Collections.Generic.IEnumerable<T>! source) -> void
static SuperLinq.SuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IList<TSource>! list) -> int
static SuperLinq.SuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IList<TSource>! list, int index) -> int
static SuperLinq.SuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Span<TSource> span) -> int
static SuperLinq.SuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array) -> int
static SuperLinq.SuperEnumerable.CountBetween<T>(this System.Collections.Generic.IEnumerable<T>! source, int min, int max) -> bool
static SuperLinq.SuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<(TKey key, int count)>!
static SuperLinq.SuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<(TKey key, int count)>!
static SuperLinq.SuperEnumerable.CountDown<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, int?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.CountDown<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<(TSource item, int? count)>!
static SuperLinq.SuperEnumerable.Defer<TResult>(System.Func<System.Collections.Generic.IEnumerable<TResult>!>! enumerableFactory) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DenseRank<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.DenseRank<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.DenseRankBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.DenseRankBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DistinctBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Do<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! onNext) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Do<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action! onCompleted) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Do<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Do<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.DoWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<bool>! condition) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Duplicates<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer = null) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, System.Index index) -> TSource
static SuperLinq.SuperEnumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, System.Index index) -> TSource?
static SuperLinq.SuperEnumerable.EndsWith<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second) -> bool
static SuperLinq.SuperEnumerable.EndsWith<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer) -> bool
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TSecond, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond, TThird, TFourth, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Collections.Generic.IEnumerable<TFourth>! fourth, System.Func<TFirst, TSecond, TThird, TFourth, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond, TThird, TFourth>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Collections.Generic.IEnumerable<TFourth>! fourth) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond, TThird, TFourth)>!
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond, TThird, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Func<TFirst, TSecond, TThird, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond, TThird>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond, TThird)>!
static SuperLinq.SuperEnumerable.EquiZip<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
static SuperLinq.SuperEnumerable.Evaluate<T>(this System.Collections.Generic.IEnumerable<System.Func<T>!>! functions) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Exactly<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> bool
static SuperLinq.SuperEnumerable.ExceptBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ExceptBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Exclude<T>(this System.Collections.Generic.IEnumerable<T>! sequence, int startIndex, int count) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FallbackIfEmpty<T>(this System.Collections.Generic.IEnumerable<T>! source, params T[]! fallback) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FallbackIfEmpty<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Collections.Generic.IEnumerable<T>! fallback) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FillBackward<T>(this System.Collections.Generic.IEnumerable<T?>! source) -> System.Collections.Generic.IEnumerable<T?>!
static SuperLinq.SuperEnumerable.FillBackward<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FillBackward<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FillForward<T>(this System.Collections.Generic.IEnumerable<T?>! source) -> System.Collections.Generic.IEnumerable<T?>!
static SuperLinq.SuperEnumerable.FillForward<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FillForward<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Finally<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action! finallyAction) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> int
static SuperLinq.SuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index) -> int
static SuperLinq.SuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, int count) -> int
static SuperLinq.SuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> int
static SuperLinq.SuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index) -> int
static SuperLinq.SuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, int count) -> int
static SuperLinq.SuperEnumerable.Flatten(this System.Collections.IEnumerable! source) -> System.Collections.Generic.IEnumerable<object?>!
static SuperLinq.SuperEnumerable.Flatten(this System.Collections.IEnumerable! source, System.Func<object?, System.Collections.IEnumerable?>! selector) -> System.Collections.Generic.IEnumerable<object?>!
static SuperLinq.SuperEnumerable.Flatten(this System.Collections.IEnumerable! source, System.Func<System.Collections.IEnumerable!, bool>! predicate) -> System.Collections.Generic.IEnumerable<object?>!
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, TResult>! folder) -> TResult
static SuperLinq.SuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource, int>! action) -> void
static SuperLinq.SuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! action) -> void
static SuperLinq.SuperEnumerable.From<T>(params System.Func<T>![]! functions) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.From<T>(System.Func<T>! function) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.From<T>(System.Func<T>! function1, System.Func<T>! function2) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.From<T>(System.Func<T>! function1, System.Func<T>! function2, System.Func<T>! function3) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.FullGroupJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TFirst>!, System.Collections.Generic.IEnumerable<TSecond>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullGroupJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TFirst>!, System.Collections.Generic.IEnumerable<TSecond>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullGroupJoin<TFirst, TSecond, TKey>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector) -> System.Collections.Generic.IEnumerable<(TKey Key, System.Collections.Generic.IEnumerable<TFirst>! First, System.Collections.Generic.IEnumerable<TSecond>! Second)>!
static SuperLinq.SuperEnumerable.FullGroupJoin<TFirst, TSecond, TKey>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<(TKey Key, System.Collections.Generic.IEnumerable<TFirst>! First, System.Collections.Generic.IEnumerable<TSecond>! Second)>!
static SuperLinq.SuperEnumerable.FullJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! firstSelector, System.Func<TSource, TResult>! secondSelector, System.Func<TSource, TSource, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! firstSelector, System.Func<TSource, TResult>! secondSelector, System.Func<TSource, TSource, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<(TLeft? left, TRight? right)>!
static SuperLinq.SuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.FullOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IEnumerable<(TLeft? left, TRight? right)>!
static SuperLinq.SuperEnumerable.Generate<TResult>(TResult initial, System.Func<TResult, TResult>! generator) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.GenerateByIndex<TResult>(System.Func<int, TResult>! generator) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, bool>! predicate) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, bool>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> System.Collections.Generic.IEnumerable<(TState state, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> System.Collections.Generic.IEnumerable<(TState state, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, bool>! predicate) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost traversed, TCost bestGuess)>!>! getNeighbors, System.Func<TState, bool>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost traversed, TCost bestGuess)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, bool>! predicate) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, bool>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, bool>! predicate) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, bool>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> TCost?
static SuperLinq.SuperEnumerable.GetShortestPaths<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors) -> System.Collections.Generic.IReadOnlyDictionary<TState, (TState? previousState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GetShortestPaths<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer) -> System.Collections.Generic.IReadOnlyDictionary<TState, (TState? previousState, TCost? cost)>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey, TElement>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static SuperLinq.SuperEnumerable.GroupAdjacent<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static SuperLinq.SuperEnumerable.HasDuplicates<T>(this System.Collections.Generic.IEnumerable<T>! source) -> bool
static SuperLinq.SuperEnumerable.HasDuplicates<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Collections.Generic.IEqualityComparer<T>? comparer) -> bool
static SuperLinq.SuperEnumerable.HasDuplicates<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> bool
static SuperLinq.SuperEnumerable.HasDuplicates<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> bool
static SuperLinq.SuperEnumerable.Identity<T>(T x) -> T
static SuperLinq.SuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IEnumerable<TResult>! thenSource) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IEnumerable<TResult>! thenSource, System.Collections.Generic.IEnumerable<TResult>! elseSource) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Index<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(int index, TSource item)>!
static SuperLinq.SuperEnumerable.Index<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int startIndex) -> System.Collections.Generic.IEnumerable<(int index, TSource item)>!
static SuperLinq.SuperEnumerable.IndexBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<(int index, TSource item)>!
static SuperLinq.SuperEnumerable.IndexBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<(int index, TSource item)>!
static SuperLinq.SuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item) -> int
static SuperLinq.SuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item, System.Index index) -> int
static SuperLinq.SuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item, System.Index index, int count) -> int
static SuperLinq.SuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<(TLeft, TRight)>!
static SuperLinq.SuperEnumerable.InnerJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.InnerJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IEnumerable<(TLeft, TRight)>!
static SuperLinq.SuperEnumerable.Insert<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, int index) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Insert<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Index index) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Interleave<T>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>! sources) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Interleave<T>(this System.Collections.Generic.IEnumerable<T>! source, params System.Collections.Generic.IEnumerable<T>![]! otherSources) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Lag<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Lag<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Lag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource current, TSource? lag)>!
static SuperLinq.SuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item) -> int
static SuperLinq.SuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item, System.Index index) -> int
static SuperLinq.SuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource item, System.Index index, int count) -> int
static SuperLinq.SuperEnumerable.Lead<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Lead<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Lead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IEnumerable<(TSource current, TSource? lead)>!
static SuperLinq.SuperEnumerable.LeftJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TFirst, TSecond, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TFirst, TSecond, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! firstSelector, System.Func<TSource, TSource, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! firstSelector, System.Func<TSource, TSource, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<(TLeft left, TRight? right)>!
static SuperLinq.SuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IEnumerable<(TLeft left, TRight? right)>!
static SuperLinq.SuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MaxItems<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.MaxItems<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.MaxItemsBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MaxItemsBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Memoize<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, bool forceCache = true) -> SuperLinq.IBuffer<TSource>!
static SuperLinq.SuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MinItems<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.MinItems<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.MinItemsBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.MinItemsBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Move<T>(this System.Collections.Generic.IEnumerable<T>! source, int fromIndex, int count, int toIndex) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.OnErrorResumeNext<TSource>(params System.Collections.Generic.IEnumerable<TSource>![]! sources) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>! sources) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.OrderBy<T, TKey>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderBy<T, TKey>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderedMerge<T, TKey, TResult>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Func<T, TKey>! keySelector, System.Func<T, TResult>! firstSelector, System.Func<T, TResult>! secondSelector, System.Func<T, T, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.OrderedMerge<T, TKey, TResult>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Func<T, TKey>! keySelector, System.Func<T, TResult>! firstSelector, System.Func<T, TResult>! secondSelector, System.Func<T, T, TResult>! bothSelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.OrderedMerge<T, TKey>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Func<T, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderedMerge<T, TKey>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Func<T, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderedMerge<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderedMerge<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.OrderedMerge<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.OrderedMerge<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TFirst, TResult>! firstSelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Pad<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width) -> System.Collections.Generic.IEnumerable<TSource?>!
static SuperLinq.SuperEnumerable.Pad<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width, System.Func<int, TSource>! paddingSelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Pad<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width, TSource padding) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width) -> System.Collections.Generic.IEnumerable<TSource?>!
static SuperLinq.SuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width, System.Func<int, TSource>! paddingSelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int width, TSource padding) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.PartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.PartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.PartialSort<T>(this System.Collections.Generic.IEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<bool, T>!>! source, System.Func<System.Collections.Generic.IEnumerable<T>!, System.Collections.Generic.IEnumerable<T>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<bool?, T>!>! source, System.Func<System.Collections.Generic.IEnumerable<T>!, System.Collections.Generic.IEnumerable<T>!, System.Collections.Generic.IEnumerable<T>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<System.Collections.Generic.IEnumerable<T>!, System.Collections.Generic.IEnumerable<T>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! predicate) -> (System.Collections.Generic.IEnumerable<T>! True, System.Collections.Generic.IEnumerable<T>! False)
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, TKey key3, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, TKey key3, System.Func<System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<TElement>!, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>!>!, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.Permutations<T>(this System.Collections.Generic.IEnumerable<T>! sequence) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<T>!>!
static SuperLinq.SuperEnumerable.Pipe<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Action<TSource>! action) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.PreScan<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation, TSource identity) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Publish<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> SuperLinq.IBuffer<TSource>!
static SuperLinq.SuperEnumerable.Random() -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Random(int maxValue) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Random(int minValue, int maxValue) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Random(System.Random! rand) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Random(System.Random! rand, int maxValue) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Random(System.Random! rand, int minValue, int maxValue) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.RandomDouble() -> System.Collections.Generic.IEnumerable<double>!
static SuperLinq.SuperEnumerable.RandomDouble(System.Random! rand) -> System.Collections.Generic.IEnumerable<double>!
static SuperLinq.SuperEnumerable.RandomSubset<T>(this System.Collections.Generic.IEnumerable<T>! source, int subsetSize) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.RandomSubset<T>(this System.Collections.Generic.IEnumerable<T>! source, int subsetSize, System.Random! rand) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Range(int start, int count, int step) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Rank<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.Rank<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.RankBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.RankBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Collections.Generic.IEnumerable<(TSource item, int rank)>!
static SuperLinq.SuperEnumerable.Repeat<TResult>(TResult value) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Replace<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int index, TSource value) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Replace<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Index index, TSource value) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Retry<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Retry<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int count) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Return<T>(T item) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.RightJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightJoin<TFirst, TSecond, TKey, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TKey>! firstKeySelector, System.Func<TSecond, TKey>! secondKeySelector, System.Func<TSecond, TResult>! secondSelector, System.Func<TFirst, TSecond, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! secondSelector, System.Func<TSource, TSource, TResult>! bothSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightJoin<TSource, TKey, TResult>(this System.Collections.Generic.IEnumerable<TSource>! first, System.Collections.Generic.IEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TResult>! secondSelector, System.Func<TSource, TSource, TResult>! bothSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IEnumerable<(TLeft? left, TRight right)>!
static SuperLinq.SuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.RightOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IEnumerable<TLeft>! left, System.Collections.Generic.IEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IEnumerable<(TLeft? left, TRight right)>!
static SuperLinq.SuperEnumerable.RunLengthEncode<T>(this System.Collections.Generic.IEnumerable<T>! sequence) -> System.Collections.Generic.IEnumerable<(T value, int count)>!
static SuperLinq.SuperEnumerable.RunLengthEncode<T>(this System.Collections.Generic.IEnumerable<T>! sequence, System.Collections.Generic.IEqualityComparer<T>? comparer) -> System.Collections.Generic.IEnumerable<(T value, int count)>!
static SuperLinq.SuperEnumerable.Scan<TSource, TState>(this System.Collections.Generic.IEnumerable<TSource>! source, TState seed, System.Func<TState, TSource, TState>! transformation) -> System.Collections.Generic.IEnumerable<TState>!
static SuperLinq.SuperEnumerable.Scan<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TState>! seedSelector, System.Func<TState, TKey, TSource, TState>! accumulator) -> System.Collections.Generic.IEnumerable<(TKey key, TState state)>!
static SuperLinq.SuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TState>! seedSelector, System.Func<TState, TKey, TSource, TState>! accumulator, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IEnumerable<(TKey key, TState state)>!
static SuperLinq.SuperEnumerable.ScanEx<TSource, TState>(this System.Collections.Generic.IEnumerable<TSource>! source, TState seed, System.Func<TState, TSource, TState>! transformation) -> System.Collections.Generic.IEnumerable<TState>!
static SuperLinq.SuperEnumerable.ScanEx<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ScanRight<TSource, TAccumulate>(this System.Collections.Generic.IEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func) -> System.Collections.Generic.IEnumerable<TAccumulate>!
static SuperLinq.SuperEnumerable.ScanRight<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! func) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Segment<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, bool>! newSegmentPredicate) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.SuperEnumerable.Segment<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.SuperEnumerable.Segment<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.SuperEnumerable.Sequence(int start, int stop) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Sequence(int start, int stop, int step) -> System.Collections.Generic.IEnumerable<int>!
static SuperLinq.SuperEnumerable.Share<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> SuperLinq.IBuffer<TSource>!
static SuperLinq.SuperEnumerable.Shuffle<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.Shuffle<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Random! rand) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.SkipUntil<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Slice<T>(this System.Collections.Generic.IEnumerable<T>! source, int startIndex, int count) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, SuperLinq.OrderByDirection direction, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, SuperLinq.OrderByDirection direction, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeByDescending<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeByDescending<TSource, TKey>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeDescending<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.SortedMergeDescending<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! comparer, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, int count) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.Split<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.SuperEnumerable.StartsWith<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second) -> bool
static SuperLinq.SuperEnumerable.StartsWith<T>(this System.Collections.Generic.IEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer) -> bool
static SuperLinq.SuperEnumerable.Subsets<T>(this System.Collections.Generic.IEnumerable<T>! sequence) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<T>!>!
static SuperLinq.SuperEnumerable.Subsets<T>(this System.Collections.Generic.IEnumerable<T>! sequence, int subsetSize) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<T>!>!
static SuperLinq.SuperEnumerable.TagFirstLast<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool, bool, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.TagFirstLast<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<(TSource item, bool isFirst, bool isLast)>!
static SuperLinq.SuperEnumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>! source, System.Range range) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.TakeEvery<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int step) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.TakeUntil<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ThenBy<T, TKey>(this System.Linq.IOrderedEnumerable<T>! source, System.Func<T, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedEnumerable<T>!
static SuperLinq.SuperEnumerable.ThenBy<T, TKey>(this System.Linq.IOrderedEnumerable<T>! source, System.Func<T, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedEnumerable<T>!
static SuperLinq.SuperEnumerable.Throw<TSource>(System.Exception! exception) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, int length, System.Func<T, int>! indexSelector, System.Func<T, int, TResult>! resultSelector) -> TResult?[]!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, int length, System.Func<T, int>! indexSelector, System.Func<T, TResult>! resultSelector) -> TResult?[]!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, int>! indexSelector, System.Func<T, int, TResult>! resultSelector) -> TResult?[]!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T, TResult>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, int>! indexSelector, System.Func<T, TResult>! resultSelector) -> TResult?[]!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T>(this System.Collections.Generic.IEnumerable<T>! source, int length, System.Func<T, int>! indexSelector) -> T?[]!
static SuperLinq.SuperEnumerable.ToArrayByIndex<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Func<T, int>! indexSelector) -> T?[]!
static SuperLinq.SuperEnumerable.ToDataTable<T, TTable>(this System.Collections.Generic.IEnumerable<T>! source, TTable! table) -> TTable!
static SuperLinq.SuperEnumerable.ToDataTable<T, TTable>(this System.Collections.Generic.IEnumerable<T>! source, TTable! table, params System.Linq.Expressions.Expression<System.Func<T, object!>!>![]! expressions) -> TTable!
static SuperLinq.SuperEnumerable.ToDataTable<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Data.DataTable!
static SuperLinq.SuperEnumerable.ToDataTable<T>(this System.Collections.Generic.IEnumerable<T>! source, params System.Linq.Expressions.Expression<System.Func<T, object!>!>![]! expressions) -> System.Data.DataTable!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<bool>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<byte>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<char>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<decimal>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<double>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<float>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<int>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<long>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<sbyte>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<short>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<string!>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<uint>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<ulong>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString(this System.Collections.Generic.IEnumerable<ushort>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDelimitedString<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, string! delimiter) -> string!
static SuperLinq.SuperEnumerable.ToDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<(TKey Key, TValue Value)>! source) -> System.Collections.Generic.Dictionary<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<(TKey Key, TValue Value)>! source, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.Dictionary<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>! source) -> System.Collections.Generic.Dictionary<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToDictionary<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>! source, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.Dictionary<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToLookup<TKey, TValue>(this System.Collections.Generic.IEnumerable<(TKey Key, TValue Value)>! source) -> System.Linq.ILookup<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToLookup<TKey, TValue>(this System.Collections.Generic.IEnumerable<(TKey Key, TValue Value)>! source, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Linq.ILookup<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToLookup<TKey, TValue>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>! source) -> System.Linq.ILookup<TKey, TValue>!
static SuperLinq.SuperEnumerable.ToLookup<TKey, TValue>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>! source, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Linq.ILookup<TKey, TValue>!
static SuperLinq.SuperEnumerable.Transpose<T>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>! source) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.SuperEnumerable.TraverseBreadthFirst<T>(T root, System.Func<T, System.Collections.Generic.IEnumerable<T>!>! childrenSelector) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.TraverseDepthFirst<T>(T root, System.Func<T, System.Collections.Generic.IEnumerable<T>!>! childrenSelector) -> System.Collections.Generic.IEnumerable<T>!
static SuperLinq.SuperEnumerable.TrySingle<T, TCardinality, TResult>(this System.Collections.Generic.IEnumerable<T>! source, TCardinality zero, TCardinality one, TCardinality many, System.Func<TCardinality, T?, TResult>! resultSelector) -> TResult
static SuperLinq.SuperEnumerable.TrySingle<T, TCardinality>(this System.Collections.Generic.IEnumerable<T>! source, TCardinality zero, TCardinality one, TCardinality many) -> (TCardinality Cardinality, T? Value)
static SuperLinq.SuperEnumerable.Unfold<TState, T, TResult>(TState state, System.Func<TState, T>! generator, System.Func<T, bool>! predicate, System.Func<T, TState>! stateSelector, System.Func<T, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Using<TSource, TResource>(System.Func<TResource>! resourceFactory, System.Func<TResource, System.Collections.Generic.IEnumerable<TSource>!>! enumerableFactory) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Where<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Collections.Generic.IEnumerable<bool>! filter) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, bool>! predicate) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.While<TSource>(System.Func<bool>! condition, System.Collections.Generic.IEnumerable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static SuperLinq.SuperEnumerable.Window<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Window<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Window<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.Window<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.WindowLeft<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowLeft<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowLeft<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowLeft<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.WindowRight<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowRight<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, int size, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowRight<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, TSource[]! array, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! selector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.WindowRight<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, int size) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2, T3, T4, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth, System.Func<T1?, T2?, T3?, T4?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2, T3, T4>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Collections.Generic.IEnumerable<T4>! fourth) -> System.Collections.Generic.IEnumerable<(T1?, T2?, T3?, T4?)>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2, T3, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third, System.Func<T1?, T2?, T3?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2, T3>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Collections.Generic.IEnumerable<T3>! third) -> System.Collections.Generic.IEnumerable<(T1?, T2?, T3?)>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2, TResult>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second, System.Func<T1?, T2?, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipLongest<T1, T2>(this System.Collections.Generic.IEnumerable<T1>! first, System.Collections.Generic.IEnumerable<T2>! second) -> System.Collections.Generic.IEnumerable<(T1?, T2?)>!
static SuperLinq.SuperEnumerable.ZipMap<TSource, TResult>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.Collections.Generic.IEnumerable<(TSource item, TResult result)>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Func<TFirst, TSecond, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TFourth, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Collections.Generic.IEnumerable<TFourth>! fourth, System.Func<TFirst, TSecond, TThird, TFourth, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TFourth>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Collections.Generic.IEnumerable<TFourth>! fourth) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond, TThird, TFourth)>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TResult>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third, System.Func<TFirst, TSecond, TThird, TResult>! resultSelector) -> System.Collections.Generic.IEnumerable<TResult>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond, TThird>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second, System.Collections.Generic.IEnumerable<TThird>! third) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond, TThird)>!
static SuperLinq.SuperEnumerable.ZipShortest<TFirst, TSecond>(this System.Collections.Generic.IEnumerable<TFirst>! first, System.Collections.Generic.IEnumerable<TSecond>! second) -> System.Collections.Generic.IEnumerable<(TFirst, TSecond)>!
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Clear() -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Comparer.get -> System.Collections.Generic.IComparer<TPriority>!
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Count.get -> int
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Dequeue() -> TElement
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Enqueue(TElement element, TPriority priority) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueDequeue(TElement element, TPriority priority) -> TElement
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueMinimum(TElement element, TPriority priority) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueRange(System.Collections.Generic.IEnumerable<(TElement Element, TPriority Priority)>! items) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueRange(System.Collections.Generic.IEnumerable<TElement>! elements, TPriority priority) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueRangeMinimum(System.Collections.Generic.IEnumerable<(TElement Element, TPriority Priority)>! items) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnqueueRangeMinimum(System.Collections.Generic.IEnumerable<TElement>! elements, TPriority priority) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.EnsureCapacity(int capacity) -> int
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.Peek() -> TElement
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.TrimExcess() -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.TryDequeue(out TElement element, out TPriority priority) -> bool
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.TryPeek(out TElement element, out TPriority priority) -> bool
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UnorderedItems.get -> System.Collections.Generic.IReadOnlyCollection<(TElement Element, TPriority Priority)>!
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue() -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(int initialCapacity) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(int initialCapacity, System.Collections.Generic.IComparer<TPriority>? priorityComparer, System.Collections.Generic.IEqualityComparer<TElement>? elementComparer) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(System.Collections.Generic.IComparer<TPriority>? priorityComparer) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(System.Collections.Generic.IEnumerable<(TElement Element, TPriority Priority)>! items) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(System.Collections.Generic.IEnumerable<(TElement Element, TPriority Priority)>! items, System.Collections.Generic.IComparer<TPriority>? priorityComparer, System.Collections.Generic.IEqualityComparer<TElement>? elementComparer) -> void
SuperLinq.Collections.UpdatablePriorityQueue<TElement, TPriority>.UpdatablePriorityQueue(System.Collections.Generic.IEqualityComparer<TElement>? elementComparer) -> void
SuperLinq.IBuffer<T>
SuperLinq.IBuffer<T>.Count.get -> int
SuperLinq.IBuffer<T>.Reset() -> void
SuperLinq.JoinType
SuperLinq.JoinType.Hash = 1 -> SuperLinq.JoinType
SuperLinq.JoinType.Loop = 0 -> SuperLinq.JoinType
SuperLinq.JoinType.Merge = 2 -> SuperLinq.JoinType
SuperLinq.OrderByDirection
SuperLinq.OrderByDirection.Ascending = 0 -> SuperLinq.OrderByDirection
SuperLinq.OrderByDirection.Descending = 1 -> SuperLinq.OrderByDirection
SuperLinq.SuperEnumerable
