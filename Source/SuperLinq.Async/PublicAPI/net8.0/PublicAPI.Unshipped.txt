#nullable enable
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, int count)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, int count)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight? right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight? right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft, TRight)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft, TRight)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft left, TRight? right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft left, TRight? right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight right)>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! comparer, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey, int>>!
static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey, int>>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterHashJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterHashJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? Left, TRight? Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterMergeJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterMergeJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? Left, TRight? Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerHashJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerHashJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerLoopJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerLoopJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerMergeJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerMergeJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterHashJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterHashJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight? Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterLoopJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterLoopJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight? Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterMergeJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterMergeJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft Left, TRight? Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterHashJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterHashJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? Left, TRight Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterMergeJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterMergeJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Collections.Generic.IComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? Left, TRight Right)>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! comparer, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Func<System.Collections.Generic.IReadOnlyList<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<TSource>!>!
SuperLinq.Async.IAsyncBuffer<T>.ConfigureAwait(bool continueOnCapturedContext) -> System.Runtime.CompilerServices.ConfiguredAsyncDisposable
