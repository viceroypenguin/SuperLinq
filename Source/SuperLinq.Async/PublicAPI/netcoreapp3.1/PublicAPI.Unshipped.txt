#nullable enable
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second) -> System.Threading.Tasks.ValueTask<bool>
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer) -> System.Threading.Tasks.ValueTask<bool>
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second) -> System.Threading.Tasks.ValueTask<bool>
*REMOVED*static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
