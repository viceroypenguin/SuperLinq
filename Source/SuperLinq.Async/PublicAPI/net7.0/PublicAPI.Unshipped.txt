#nullable enable
static SuperLinq.Async.AsyncSuperEnumerable.Amb<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Amb<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Batch<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, int skip) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<System.Threading.Tasks.ValueTask<TValue>>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<System.Threading.Tasks.ValueTask<TValue>>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources, System.Collections.Generic.IAsyncEnumerable<TResult>! defaultSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources, System.Collections.Generic.IAsyncEnumerable<TResult>! defaultSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource, TException>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TException!, System.Collections.Generic.IAsyncEnumerable<TSource>!>! handler) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>![]! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Defer<TResult>(System.Func<System.Collections.Generic.IAsyncEnumerable<TResult>!>! enumerableFactory) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Exception!, System.Threading.Tasks.ValueTask>! onError) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Exception!, System.Threading.Tasks.ValueTask>! onError, System.Func<System.Threading.Tasks.ValueTask>! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Threading.Tasks.ValueTask>! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DoWhile<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<bool>! condition) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DoWhile<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<System.Threading.Tasks.ValueTask<bool>>! condition) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Finally<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action! finallyAction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource, int>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.ValueTask>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource, System.Collections.Generic.IAsyncEnumerable<TResult>! elseSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource, System.Collections.Generic.IAsyncEnumerable<TResult>! elseSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Memoize<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>![]! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Publish<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<TSource>!, System.Collections.Generic.IAsyncEnumerable<TResult>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Publish<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TResult>(TResult value) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Return<T>(T item) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Scan<TSource, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TState seed, System.Func<TState, TSource, TState>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TState>!
static SuperLinq.Async.AsyncSuperEnumerable.Scan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Share<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<TSource>!, System.Collections.Generic.IAsyncEnumerable<TResult>!>! selector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Share<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Throw<TSource>(System.Exception! exception) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Timeout<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.TimeSpan timeout) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Using<TSource, TResource>(System.Func<TResource>! resourceFactory, System.Func<TResource, System.Collections.Generic.IAsyncEnumerable<TSource>!>! enumerableFactory) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.While<TSource>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.While<TSource>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
SuperLinq.Async.IAsyncBuffer<T>
SuperLinq.Async.IAsyncBuffer<T>.Count.get -> int
SuperLinq.Async.IAsyncBuffer<T>.Reset(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
