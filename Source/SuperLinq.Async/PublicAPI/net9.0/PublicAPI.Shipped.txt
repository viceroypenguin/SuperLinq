#nullable enable
static SuperLinq.Async.AsyncSuperEnumerable.AggregateBy<TSource, TKey, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TAccumulate>! seedSelector, System.Func<TAccumulate, TSource, TAccumulate>! func, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>!
static SuperLinq.Async.AsyncSuperEnumerable.AggregateBy<TSource, TKey, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, TAccumulate seed, System.Func<TAccumulate, TSource, TAccumulate>! func, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>!
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>! func, System.Func<TAccumulate, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.Tasks.ValueTask<TAccumulate>>! func, System.Func<TAccumulate, System.Threading.Tasks.ValueTask<TResult>>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func, System.Func<TAccumulate, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TAccumulate>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.Tasks.ValueTask<TAccumulate>>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TAccumulate>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TAccumulate>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TSource>>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TSource>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TSource>>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TSource>
static SuperLinq.Async.AsyncSuperEnumerable.AggregateRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! func, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TSource>
static SuperLinq.Async.AsyncSuperEnumerable.Amb<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Amb<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.AssertCount<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.AtLeast<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.AtMost<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.Batch<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.BindByIndex<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IAsyncEnumerable<int>! indices, System.Func<TSource, int, TResult>! resultSelector, System.Func<int, TResult>! missingSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.BindByIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IAsyncEnumerable<int>! indices) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Buffer<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, int skip) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<System.Threading.Tasks.ValueTask<TValue>>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<System.Threading.Tasks.ValueTask<TValue>>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources, System.Collections.Generic.IAsyncEnumerable<TResult>! defaultSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Case<TValue, TResult>(System.Func<TValue>! selector, System.Collections.Generic.IDictionary<TValue, System.Collections.Generic.IAsyncEnumerable<TResult>!>! sources, System.Collections.Generic.IAsyncEnumerable<TResult>! defaultSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource, TException>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TException!, System.Collections.Generic.IAsyncEnumerable<TSource>!>! handler) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>![]! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Catch<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Choose<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, (bool, TResult)>! chooser) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Choose<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<(bool, TResult)>>! chooser) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Choose<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<(bool, TResult)>>! chooser) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.CollectionEqual<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second, System.Collections.Generic.IEqualityComparer<TSource>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.CollectionEqual<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.CompareCount<TFirst, TSecond>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.ConcurrentMerge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ConcurrentMerge<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ConcurrentMerge<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources, int maxConcurrency) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Consume<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IList<TSource>! list, int index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.CopyTo<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IList<TSource>! list, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.CountBetween<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int min, int max, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, int count)>!
static SuperLinq.Async.AsyncSuperEnumerable.CountBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, int count)>!
static SuperLinq.Async.AsyncSuperEnumerable.CountDown<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, int?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.CountDown<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int? count)>!
static SuperLinq.Async.AsyncSuperEnumerable.Defer<TResult>(System.Func<System.Collections.Generic.IAsyncEnumerable<TResult>!>! enumerableFactory) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DensePartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DenseRank<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.DenseRank<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.DenseRankBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.DenseRankBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DistinctUntilChanged<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! onNext, System.Action<System.Exception!>! onError, System.Action! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Exception!, System.Threading.Tasks.ValueTask>! onError) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Exception!, System.Threading.Tasks.ValueTask>! onError, System.Func<System.Threading.Tasks.ValueTask>! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Do<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! onNext, System.Func<System.Threading.Tasks.ValueTask>! onCompleted) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DoWhile<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<bool>! condition) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.DoWhile<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<System.Threading.Tasks.ValueTask<bool>>! condition) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Duplicates<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IEqualityComparer<TSource>? comparer = null) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ElementAtAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TSource>
static SuperLinq.Async.AsyncSuperEnumerable.ElementAtOrDefaultAsync<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TSource?>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EndsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Func<TFirst, TSecond, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond, TThird, TFourth, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Collections.Generic.IAsyncEnumerable<TFourth>! fourth, System.Func<TFirst, TSecond, TThird, TFourth, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond, TThird, TFourth>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Collections.Generic.IAsyncEnumerable<TFourth>! fourth) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond, TThird, TFourth)>!
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond, TThird, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Func<TFirst, TSecond, TThird, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond, TThird>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond, TThird)>!
static SuperLinq.Async.AsyncSuperEnumerable.EquiZip<TFirst, TSecond>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond)>!
static SuperLinq.Async.AsyncSuperEnumerable.Evaluate<T>(this System.Collections.Generic.IAsyncEnumerable<System.Func<System.Threading.Tasks.Task<T>!>!>! functions) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Evaluate<T>(this System.Collections.Generic.IEnumerable<System.Func<System.Threading.Tasks.Task<T>!>!>! functions) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Exactly<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.ExceptBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ExceptBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.FallbackIfEmpty<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, params T[]! fallback) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FallbackIfEmpty<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Collections.Generic.IAsyncEnumerable<T>! fallback) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FallbackIfEmpty<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Collections.Generic.IEnumerable<T>! fallback) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, System.Threading.Tasks.ValueTask<T>>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Func<T, T, System.Threading.Tasks.ValueTask<T>>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillBackward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, System.Threading.Tasks.ValueTask<T>>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Func<T, T, System.Threading.Tasks.ValueTask<T>>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FillForward<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Func<T, T, T>! fillSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Finally<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action! finallyAction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.FindIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.FindLastIndex<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Fold<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, TResult>! folder) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource, int>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, int, System.Threading.Tasks.ValueTask>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.ForEach<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
static SuperLinq.Async.AsyncSuperEnumerable.From<T>(params System.Func<System.Threading.Tasks.Task<T>!>![]! functions) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.From<T>(System.Func<System.Threading.Tasks.Task<T>!>! function) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.From<T>(System.Func<System.Threading.Tasks.Task<T>!>! function1, System.Func<System.Threading.Tasks.Task<T>!>! function2) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.From<T>(System.Func<System.Threading.Tasks.Task<T>!>! function1, System.Func<System.Threading.Tasks.Task<T>!>! function2, System.Func<System.Threading.Tasks.Task<T>!>! function3) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight? right)>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.FullOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight? right)>!
static SuperLinq.Async.AsyncSuperEnumerable.Generate<TResult>(TResult initial, System.Func<TResult, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! generator) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Generate<TResult>(TResult initial, System.Func<TResult, System.Threading.Tasks.ValueTask<TResult>>! generator) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GenerateByIndex<TResult>(System.Func<int, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! generator) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GenerateByIndex<TResult>(System.Func<int, System.Threading.Tasks.ValueTask<TResult>>! generator) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GenerateByIndex<TResult>(System.Func<int, TResult>! generator) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState state, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState state, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost traversed, TCost bestGuess)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPath<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost traversed, TCost bestGuess)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<(TState nextState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, TState end, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, System.Func<TState, System.Threading.Tasks.ValueTask<bool>>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPathCost<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost, TCost bestGuess)>!>! getNeighbors, TState end, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TCost?>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPaths<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Collections.Generic.IEqualityComparer<TState>? stateComparer, System.Collections.Generic.IComparer<TCost>? costComparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyDictionary<TState, (TState? previousState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GetShortestPaths<TState, TCost>(TState start, System.Func<TState, TCost?, System.Collections.Generic.IAsyncEnumerable<(TState nextState, TCost cost)>!>! getNeighbors, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyDictionary<TState, (TState? previousState, TCost? cost)>!>
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TElement>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IGrouping<TKey, TElement>!>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.GroupAdjacent<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Linq.IGrouping<TKey, TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.HasDuplicates<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.HasDuplicates<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Collections.Generic.IEqualityComparer<T>? comparer) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.HasDuplicates<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.HasDuplicates<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.Identity<T>(T x) -> T
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource, System.Collections.Generic.IAsyncEnumerable<TResult>! elseSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.If<TResult>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TResult>! thenSource, System.Collections.Generic.IAsyncEnumerable<TResult>! elseSource) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Index<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(int index, TSource item)>!
static SuperLinq.Async.AsyncSuperEnumerable.Index<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int startIndex) -> System.Collections.Generic.IAsyncEnumerable<(int index, TSource item)>!
static SuperLinq.Async.AsyncSuperEnumerable.IndexBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<(int index, TSource item)>!
static SuperLinq.Async.AsyncSuperEnumerable.IndexBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(int index, TSource item)>!
static SuperLinq.Async.AsyncSuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Index index, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.IndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft, TRight)>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.InnerJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft, TRight)>!
static SuperLinq.Async.AsyncSuperEnumerable.Insert<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, int index) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Insert<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Index index) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Interleave<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, params System.Collections.Generic.IAsyncEnumerable<T>![]! otherSources) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Interleave<T>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<T>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Lag<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lag<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lag<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lag<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IAsyncEnumerable<(TSource current, TSource? lag)>!
static SuperLinq.Async.AsyncSuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Index index, int count, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Index index, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.LastIndexOf<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<int>
static SuperLinq.Async.AsyncSuperEnumerable.Lead<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lead<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TResult>>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lead<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Lead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset) -> System.Collections.Generic.IAsyncEnumerable<(TSource current, TSource? lead)>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft left, TRight? right)>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TLeft, TResult>! leftResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.LeftOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft left, TRight? right)>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxItems<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxItems<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxItemsBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MaxItemsBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Memoize<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinByWithTies<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinItems<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.MinItems<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.MinItemsBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.MinItemsBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(params System.Collections.Generic.IAsyncEnumerable<TSource>![]! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! first, System.Collections.Generic.IAsyncEnumerable<TSource>! second) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OnErrorResumeNext<TSource>(this System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<TSource>!>! sources) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.OrderBy<T, TKey>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.OrderBy<T, TKey>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Pad<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width) -> System.Collections.Generic.IAsyncEnumerable<TSource?>!
static SuperLinq.Async.AsyncSuperEnumerable.Pad<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width, System.Func<int, TSource>! paddingSelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Pad<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width, TSource padding) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width) -> System.Collections.Generic.IAsyncEnumerable<TSource?>!
static SuperLinq.Async.AsyncSuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width, System.Func<int, TSource>! paddingSelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PadStart<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int width, TSource padding) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSort<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, int count, System.Collections.Generic.IComparer<T>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.PartialSortBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, SuperLinq.OrderByDirection direction) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<bool, T>!>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<T>!, System.Collections.Generic.IAsyncEnumerable<T>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<bool?, T>!>! source, System.Func<System.Collections.Generic.IAsyncEnumerable<T>!, System.Collections.Generic.IAsyncEnumerable<T>!, System.Collections.Generic.IAsyncEnumerable<T>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<T, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Func<System.Collections.Generic.IEnumerable<T>!, System.Collections.Generic.IEnumerable<T>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<(System.Collections.Generic.IEnumerable<T>! True, System.Collections.Generic.IEnumerable<T>! False)>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, TKey key3, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.Partition<TKey, TElement, TResult>(this System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>! source, TKey key1, TKey key2, TKey key3, System.Func<System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<TElement>!, System.Collections.Generic.IAsyncEnumerable<System.Linq.IAsyncGrouping<TKey, TElement>!>!, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.PreScan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation, TSource identity) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Publish<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Random() -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Random(int maxValue) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Random(int minValue, int maxValue) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Random(System.Random! rand) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Random(System.Random! rand, int maxValue) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Random(System.Random! rand, int minValue, int maxValue) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.RandomDouble() -> System.Collections.Generic.IAsyncEnumerable<double>!
static SuperLinq.Async.AsyncSuperEnumerable.RandomDouble(System.Random! rand) -> System.Collections.Generic.IAsyncEnumerable<double>!
static SuperLinq.Async.AsyncSuperEnumerable.Range(int start, int count, int step) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Rank<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.Rank<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>! comparer) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.RankBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.RankBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, int rank)>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TResult>(TResult value) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Repeat<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Replace<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int index, TSource value) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Replace<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Index index, TSource value) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Retry<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int count) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Return<T>(T item) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TComparer>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, TComparer comparer) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight right)>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey, TResult>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector, System.Func<TRight, TResult>! rightResultSelector, System.Func<TLeft, TRight, TResult>! bothResultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.RightOuterJoin<TLeft, TRight, TKey>(this System.Collections.Generic.IAsyncEnumerable<TLeft>! left, System.Collections.Generic.IAsyncEnumerable<TRight>! right, SuperLinq.JoinType joinType, System.Func<TLeft, TKey>! leftKeySelector, System.Func<TRight, TKey>! rightKeySelector) -> System.Collections.Generic.IAsyncEnumerable<(TLeft? left, TRight right)>!
static SuperLinq.Async.AsyncSuperEnumerable.RunLengthEncode<T>(this System.Collections.Generic.IAsyncEnumerable<T>! sequence) -> System.Collections.Generic.IAsyncEnumerable<(T value, int count)>!
static SuperLinq.Async.AsyncSuperEnumerable.RunLengthEncode<T>(this System.Collections.Generic.IAsyncEnumerable<T>! sequence, System.Collections.Generic.IEqualityComparer<T>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(T value, int count)>!
static SuperLinq.Async.AsyncSuperEnumerable.Scan<TSource, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TState seed, System.Func<TState, TSource, TState>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TState>!
static SuperLinq.Async.AsyncSuperEnumerable.Scan<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TState>>! seedSelector, System.Func<TState, TKey, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TState>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TState>>! seedSelector, System.Func<TState, TKey, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TState>>! accumulator, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Threading.Tasks.ValueTask<TState>>! seedSelector, System.Func<TState, TKey, TSource, System.Threading.Tasks.ValueTask<TState>>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TKey>>! keySelector, System.Func<TKey, System.Threading.Tasks.ValueTask<TState>>! seedSelector, System.Func<TState, TKey, TSource, System.Threading.Tasks.ValueTask<TState>>! accumulator, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TState>! seedSelector, System.Func<TState, TKey, TSource, TState>! accumulator) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanBy<TSource, TKey, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TKey, TState>! seedSelector, System.Func<TState, TKey, TSource, TState>! accumulator, System.Collections.Generic.IEqualityComparer<TKey>? comparer) -> System.Collections.Generic.IAsyncEnumerable<(TKey key, TState state)>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanEx<TSource, TState>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TState seed, System.Func<TState, TSource, TState>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TState>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanEx<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! transformation) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TAccumulate>>! func) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, System.Threading.Tasks.ValueTask<TAccumulate>>! func) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource, TAccumulate>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TAccumulate seed, System.Func<TSource, TAccumulate, TAccumulate>! func) -> System.Collections.Generic.IAsyncEnumerable<TAccumulate>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TSource>>! func) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<TSource>>! func) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ScanRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TSource, TSource>! func) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, bool>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Segment<T>(this System.Collections.Generic.IAsyncEnumerable<T>! source, System.Func<T, T, int, System.Threading.Tasks.ValueTask<bool>>! newSegmentPredicate) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Sequence(int start, int stop) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Sequence(int start, int stop, int step) -> System.Collections.Generic.IAsyncEnumerable<int>!
static SuperLinq.Async.AsyncSuperEnumerable.Share<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> SuperLinq.Async.IAsyncBuffer<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SkipUntil<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, SuperLinq.OrderByDirection direction, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, SuperLinq.OrderByDirection direction, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMerge<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, SuperLinq.OrderByDirection direction, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeBy<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeByDescending<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeByDescending<TSource, TKey>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeDescending<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.SortedMergeDescending<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IComparer<TSource>? comparer, params System.Collections.Generic.IAsyncEnumerable<TSource>![]! otherSequences) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>! comparer, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Func<System.Collections.Generic.IEnumerable<TSource>!, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! separatorFunc, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.Split<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, TSource separator, System.Collections.Generic.IEqualityComparer<TSource>? comparer, int count) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IEnumerable<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.StartsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.StartsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IAsyncEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.StartsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Collections.Generic.IEqualityComparer<T>? comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.StartsWith<T>(this System.Collections.Generic.IAsyncEnumerable<T>! first, System.Collections.Generic.IEnumerable<T>! second, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
static SuperLinq.Async.AsyncSuperEnumerable.TagFirstLast<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool, bool, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.TagFirstLast<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, bool isFirst, bool isLast)>!
static SuperLinq.Async.AsyncSuperEnumerable.Take<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Range range) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.TakeEvery<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int step) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.TakeUntil<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.ThenBy<T, TKey>(this System.Linq.IOrderedAsyncEnumerable<T>! source, System.Func<T, TKey>! keySelector, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.ThenBy<T, TKey>(this System.Linq.IOrderedAsyncEnumerable<T>! source, System.Func<T, TKey>! keySelector, System.Collections.Generic.IComparer<TKey>! comparer, SuperLinq.OrderByDirection direction) -> System.Linq.IOrderedAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.Throw<TSource>(System.Exception! exception) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Timeout<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.TimeSpan timeout) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.TraverseBreadthFirst<T>(T root, System.Func<T, System.Collections.Generic.IAsyncEnumerable<T>!>! childrenSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.TraverseDepthFirst<T>(T root, System.Func<T, System.Collections.Generic.IAsyncEnumerable<T>!>! childrenSelector) -> System.Collections.Generic.IAsyncEnumerable<T>!
static SuperLinq.Async.AsyncSuperEnumerable.TrySingle<T, TCardinality, TResult>(this System.Collections.Generic.IAsyncEnumerable<T>! source, TCardinality zero, TCardinality one, TCardinality many, System.Func<TCardinality, T?, TResult>! resultSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<TResult>
static SuperLinq.Async.AsyncSuperEnumerable.TrySingle<T, TCardinality>(this System.Collections.Generic.IAsyncEnumerable<T>! source, TCardinality zero, TCardinality one, TCardinality many, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<(TCardinality Cardinality, T? Value)>
static SuperLinq.Async.AsyncSuperEnumerable.Using<TSource, TResource>(System.Func<TResource>! resourceFactory, System.Func<TResource, System.Collections.Generic.IAsyncEnumerable<TSource>!>! enumerableFactory) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Where<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Collections.Generic.IAsyncEnumerable<bool>! filter) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLag<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLagValue, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, System.Func<TSource, TSource?, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, bool>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.WhereLead<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int offset, TSource defaultLeadValue, System.Func<TSource, TSource, System.Threading.Tasks.ValueTask<bool>>! predicate) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.While<TSource>(System.Func<bool>! condition, System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.While<TSource>(System.Func<System.Threading.Tasks.ValueTask<bool>>! condition, System.Collections.Generic.IAsyncEnumerable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static SuperLinq.Async.AsyncSuperEnumerable.Window<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.WindowLeft<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.WindowRight<TSource>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, int size) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IList<TSource>!>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2, T3, T4, TResult>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second, System.Collections.Generic.IAsyncEnumerable<T3>! third, System.Collections.Generic.IAsyncEnumerable<T4>! fourth, System.Func<T1?, T2?, T3?, T4?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2, T3, T4>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second, System.Collections.Generic.IAsyncEnumerable<T3>! third, System.Collections.Generic.IAsyncEnumerable<T4>! fourth) -> System.Collections.Generic.IAsyncEnumerable<(T1?, T2?, T3?, T4?)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2, T3, TResult>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second, System.Collections.Generic.IAsyncEnumerable<T3>! third, System.Func<T1?, T2?, T3?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2, T3>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second, System.Collections.Generic.IAsyncEnumerable<T3>! third) -> System.Collections.Generic.IAsyncEnumerable<(T1?, T2?, T3?)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2, TResult>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second, System.Func<T1?, T2?, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipLongest<T1, T2>(this System.Collections.Generic.IAsyncEnumerable<T1>! first, System.Collections.Generic.IAsyncEnumerable<T2>! second) -> System.Collections.Generic.IAsyncEnumerable<(T1?, T2?)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipMap<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<TResult>>! selector) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, TResult result)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipMap<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, System.Threading.Tasks.ValueTask<TResult>>! selector) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, TResult result)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipMap<TSource, TResult>(this System.Collections.Generic.IAsyncEnumerable<TSource>! source, System.Func<TSource, TResult>! selector) -> System.Collections.Generic.IAsyncEnumerable<(TSource item, TResult result)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Func<TFirst, TSecond, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TFourth, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Collections.Generic.IAsyncEnumerable<TFourth>! fourth, System.Func<TFirst, TSecond, TThird, TFourth, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TFourth>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Collections.Generic.IAsyncEnumerable<TFourth>! fourth) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond, TThird, TFourth)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond, TThird, TResult>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third, System.Func<TFirst, TSecond, TThird, TResult>! resultSelector) -> System.Collections.Generic.IAsyncEnumerable<TResult>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond, TThird>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second, System.Collections.Generic.IAsyncEnumerable<TThird>! third) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond, TThird)>!
static SuperLinq.Async.AsyncSuperEnumerable.ZipShortest<TFirst, TSecond>(this System.Collections.Generic.IAsyncEnumerable<TFirst>! first, System.Collections.Generic.IAsyncEnumerable<TSecond>! second) -> System.Collections.Generic.IAsyncEnumerable<(TFirst, TSecond)>!
SuperLinq.Async.AsyncSuperEnumerable
SuperLinq.Async.IAsyncBuffer<T>
SuperLinq.Async.IAsyncBuffer<T>.Count.get -> int
SuperLinq.Async.IAsyncBuffer<T>.Reset(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
