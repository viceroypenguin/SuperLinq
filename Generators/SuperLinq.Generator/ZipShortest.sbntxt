{{ 
    $arity = arity
    $ordinals = ordinals
    $cardinals = cardinals
}}

namespace SuperLinq;

#nullable enable

public static partial class SuperEnumerable
{
	{{~ for $i in 2..4 ~}}
    /// <summary>
    ///	    Returns a projection of tuples, where each tuple contains the N-th element from each of the argument
    ///     sequences. The resulting sequence is as short as the shortest input sequence.
    /// </summary>
    /// <typeparam name = "TResult">
    ///	    The type of the elements of the result sequence.
	/// </typeparam>
    /// <param name = "resultSelector">
	///	    A projection function that combines elements from all of the sequences.
	/// </param>
    /// <returns>
	///	    A sequence of elements returned by <paramref name = "resultSelector"/>.
	/// </returns>
    /// <remarks>
    ///	    This method uses deferred execution and streams its results.
    /// </remarks>
    /// <exception cref="global::System.ArgumentNullException">
	///     <paramref name="resultSelector"/> or any of the input sequences is <see langword="null"/>.
	/// </exception>
	{{~ for $j in 1..$i ~}}
    /// <typeparam name="T{{ $cardinals[$j] }}">
	///     The type of the elements of <paramref name="{{ $ordinals[$j] }}" />.
	/// </typeparam>
	/// <param name="{{ $ordinals[$j] }}">
	///     The {{ $ordinals[$j] }} sequence of elements.
	/// </param>
	{{~ end ~}}
    public static global::System.Collections.Generic.IEnumerable<TResult> ZipShortest<{{ for $j in 1..$i }}T{{ $cardinals[$j] }}, {{ end }}TResult>(this 
		{{~ for $j in 1..$i ~}}
        global::System.Collections.Generic.IEnumerable<T{{ $cardinals[$j] }}> {{ $ordinals[$j] }},
		{{~ end ~}}
        global::System.Func<{{ for $j in 1..$i }}T{{ $cardinals[$j] }}, {{ end }}TResult> resultSelector)
	{
		{{~ for $j in 1..$i ~}}
        ArgumentNullException.ThrowIfNull({{ $ordinals[$j] }});
		{{~ end ~}}

        ArgumentNullException.ThrowIfNull(resultSelector);

		if (
			{{~ for $j in 1..$i ~}}
			{{ $ordinals[$j] }} is global::System.Collections.Generic.IList<T{{ $cardinals[$j] }}> list{{ $j }}{{ if !for.last }}&&{{ else }}){{ end }}
			{{~ end ~}}
		{
			return new ZipShortestIterator<{{ for $j in 1..$i }}T{{ $cardinals[$j] }}, {{ end }}TResult>(
				{{~ for $j in 1..$i ~}}
				list{{ $j }},
				{{~ end ~}}
				resultSelector);
		}

		return Core(
			{{~ for $j in 1..$i ~}}
			{{ $ordinals[$j] }},
			{{~ end ~}}
			resultSelector);

		static global::System.Collections.Generic.IEnumerable<TResult> Core(
			{{~ for $j in 1..$i ~}}
			global::System.Collections.Generic.IEnumerable<T{{ $cardinals[$j] }}> {{ $ordinals[$j] }},
			{{~ end ~}}
			global::System.Func<{{ for $j in 1..$i }}T{{ $cardinals[$j] }}, {{ end }}TResult> resultSelector)
		{
			{{~ for $j in 1..$i ~}}
			using var e{{ $j }} = {{ $ordinals[$j] }}.GetEnumerator();
			{{~ end ~}}

			while (
				{{~ for $j in 1..$i ~}}
				{{ if !for.first }}&&{{ end }}
				e{{$j}}.MoveNext()
				{{~ end ~}}
				)
			{
				yield return resultSelector(
					{{~ for $j in 1..$i ~}}
					e{{$j}}.Current{{ if !for.last }},{{ end }}
					{{~ end ~}}
				);
			}
		}
	}

	/// <summary>
    ///	    Returns a projection of tuples, where each tuple contains the N-th element from each of the argument
    ///     sequences. The resulting sequence will always be as long as the longest of input sequences where the default
    ///     value of each of the shorter sequence element types is used for padding.
    /// </summary>
    /// <returns>
	///		A sequence of <see cref="global::System.ValueTuple{ {{~ for $j in 1..$i ~}}T{{$j}}{{ if !for.last }},{{ end }}{{ end }} }" /> containing corresponding elements from each
    ///     of the sequences.
	/// </returns>
	/// <remarks>
    ///     This method uses deferred execution and streams its results.
    /// </remarks>
    /// <exception cref="global::System.ArgumentNullException">
	///     Any of the input sequences is <see langword="null"/>.
	/// </exception>
	{{~ for $j in 1..$i ~}}
    /// <typeparam name="T{{ $cardinals[$j] }}">
	///     The type of the elements of <paramref name="{{ $ordinals[$j] }}" />.
	/// </typeparam>
	/// <param name="{{ $ordinals[$j] }}">
	///     The {{ $ordinals[$j] }} sequence of elements.
	/// </param>
	{{~ end ~}}
    public static global::System.Collections.Generic.IEnumerable<({{~ for $j in 1..$i ~}}T{{ $cardinals[$j] }}{{ if !for.last }},{{ end }}{{ end }})> 
		ZipShortest<{{~ for $j in 1..$i ~}}T{{ $cardinals[$j] }}{{ if !for.last }},{{ end }}{{ end }}>(this
			{{~ for $j in 1..$i ~}}
			global::System.Collections.Generic.IEnumerable<T{{ $cardinals[$j] }}> {{ $ordinals[$j] }}{{ if !for.last }},{{ end }}
			{{~ end ~}}) =>
		ZipShortest({{~ for $j in 1..$i ~}}{{ $ordinals[$j] }}, {{ end }}global::System.ValueTuple.Create);

	private sealed class ZipShortestIterator<{{ for $j in 1..$i }}T{{ $j }}, {{ end }}TResult> : ListIterator<TResult>
	{
		{{~ for $j in 1..$i ~}}
		private readonly global::System.Collections.Generic.IList<T{{ $j }}> _list{{ $j }};
		{{~ end ~}}
		private readonly global::System.Func<{{ for $j in 1..$i }}T{{ $j }}, {{ end }}TResult> _resultSelector;
		
		public ZipShortestIterator(
			{{~ for $j in 1..$i ~}}
			global::System.Collections.Generic.IList<T{{ $j }}> {{ $ordinals[$j] }},
			{{~ end ~}}
			global::System.Func<{{ for $j in 1..$i }}T{{ $j }}, {{ end }}TResult> resultSelector)
		{
			{{~ for $j in 1..$i ~}}
			_list{{ $j }} = {{ $ordinals[$j] }};
			{{~ end ~}}
			_resultSelector	= resultSelector;
		}

		public override int Count => Min({{ for $j in 1..$i }}_list{{ $j }}.Count{{ if !for.last }}, {{ end }}{{ end }});

		protected override IEnumerable<TResult> GetEnumerable()
		{
			var cnt = (uint)Count;
			for (var i = 0; i < cnt; i++)
			{
				yield return _resultSelector(
					{{~ for $j in 1..$i ~}}
					_list{{ $j }}[i]{{ if !for.last }}, {{ end }}
					{{~ end ~}});
			}
		}

		protected override TResult ElementAt(int index)
		{
			ArgumentOutOfRangeException.ThrowIfNegative(index);
			ArgumentOutOfRangeException.ThrowIfGreaterThanOrEqual(index, Count);

			return _resultSelector(
				{{~ for $j in 1..$i ~}}
				_list{{ $j }}[index]{{ if !for.last }}, {{ end }}
				{{~ end ~}});
		}
	}
	{{ end ~}}
}
