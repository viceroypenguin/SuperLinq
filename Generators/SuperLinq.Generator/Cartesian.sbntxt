{{ 
    $arity = arity
    $ordinals = ordinals
}}

namespace SuperLinq;

#nullable enable

public static partial class SuperEnumerable
{
	{{~ for $i in 2..($arity.size - 1) ~}}
    /// <summary>
    ///	    Returns the Cartesian product of {{ $arity[$i] }} sequences by enumerating all possible combinations of one item from
    ///	    each sequence, and applying a user-defined projection to the items in a given combination.
    /// </summary>
    /// <typeparam name="TResult">
    ///		The type of the elements of the result sequence.
	/// </typeparam>
    /// <param name="resultSelector">
	///		A projection function that combines elements from all of the sequences.
	/// </param>
    /// <returns>
	///		A sequence of elements returned by <paramref name="resultSelector"/>.
	/// </returns>
    /// <remarks>
    /// <para>
    ///	    The method returns items in the same order as a nested foreach loop, but all sequences cached when iterated
    ///	    over. The cache is then re-used for any subsequent iterations.
	/// </para>
    /// <para>
    ///		This method uses deferred execution and stream its results.
	/// </para>
    /// </remarks>
    /// <exception cref="global::System.ArgumentNullException">
	///		<paramref name="resultSelector"/> or any of the input sequences is <see langword = "null"/>.
	/// </exception>
	{{~ for $j in 1..$i ~}}
    /// <typeparam name="T{{$j}}">
	///		The type of the elements of <paramref name="{{ $ordinals[$j] }}" />.
	/// </typeparam>
	/// <param name="{{ $ordinals[$j] }}">
	///		The {{ $ordinals[$j] }} sequence of elements.
	/// </param>
	{{~ end ~}}
    public static global::System.Collections.Generic.IEnumerable<TResult> Cartesian<{{ for $j in 1..$i }}T{{$j}}, {{ end }}TResult>(this 
		{{~ for $j in 1..$i ~}}
        global::System.Collections.Generic.IEnumerable<T{{$j}}> {{ $ordinals[$j] }},
		{{~ end ~}}
        global::System.Func<{{ for $j in 1..$i }}T{{$j}}, {{ end }}TResult> resultSelector)
	{
		{{~ for $j in 1..$i ~}}
        ArgumentNullException.ThrowIfNull({{ $ordinals[$j] }});
		{{~ end ~}}

        ArgumentNullException.ThrowIfNull(resultSelector);

		return Core(
			{{~ for $j in 1..$i ~}}
			{{ $ordinals[$j] }},
			{{~ end ~}}
			resultSelector);

		static global::System.Collections.Generic.IEnumerable<TResult> Core(
			{{~ for $j in 1..$i ~}}
			global::System.Collections.Generic.IEnumerable<T{{$j}}> {{ $ordinals[$j] }},
			{{~ end ~}}
			global::System.Func<{{ for $j in 1..$i }}T{{$j}}, {{ end }}TResult> resultSelector)
		{
			{{~ for $j in 1..$i ~}}
			using var {{ $ordinals[$j] }}Memo = {{ $ordinals[$j] }}.Memoize();
			{{~ end ~}}

			{{~ for $j in 1..$i ~}}
			foreach (var item{{$j}} in {{ $ordinals[$j] }}Memo)
			{{~ end ~}}
				yield return resultSelector(
					{{~ for $j in 1..$i ~}}
					item{{$j}}{{ if !for.last }},{{ end }}
					{{~ end ~}}
				);
		}
	}

	/// <summary>
    ///	    Returns the Cartesian product of {{ $arity[$i] }} sequences by enumerating all possible combinations of one item from
    ///     each sequence.
    /// </summary>
    /// <returns>
	///		A sequence of <see cref="global::System.ValueTuple{ {{~ for $j in 1..$i ~}}T{{$j}}{{ if !for.last }},{{ end }}{{ end }} }" /> containing elements from each of the 
	///		sequences.
	/// </returns>
    /// <remarks>
    /// <para>
    ///	    The method returns items in the same order as a nested foreach loop, but all sequences are cached when
    ///     iterated over. The cache is then re-used for any subsequent iterations.
	/// </para>
    /// <para>
    ///		This method uses deferred execution and stream its results.
	/// </para>
    /// </remarks>
    /// <exception cref="global::System.ArgumentNullException">
	///		Any of the input sequences is <see langword = "null"/>.
	/// </exception>
	{{~ for $j in 1..$i ~}}
    /// <typeparam name="T{{$j}}">
	///		The type of the elements of <paramref name="{{ $ordinals[$j] }}" />.
	/// </typeparam>
	/// <param name="{{ $ordinals[$j] }}">
	///		The {{ $ordinals[$j] }} sequence of elements.
	/// </param>
	{{~ end ~}}
    public static global::System.Collections.Generic.IEnumerable<({{~ for $j in 1..$i ~}}T{{$j}}{{ if !for.last }},{{ end }}{{ end }})> 
		Cartesian<{{~ for $j in 1..$i ~}}T{{$j}}{{ if !for.last }},{{ end }}{{ end }}>(this
			{{~ for $j in 1..$i ~}}
			global::System.Collections.Generic.IEnumerable<T{{$j}}> {{ $ordinals[$j] }}{{ if !for.last }},{{ end }}
			{{~ end ~}}) =>
		Cartesian({{~ for $j in 1..$i ~}}{{ $ordinals[$j] }}, {{ end }}global::System.ValueTuple.Create);
	{{ end ~}}
}
