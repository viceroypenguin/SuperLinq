# http://editorconfig.org/

root = true

[*]
indent_style = tab
insert_final_newline = true
tab_width = 4
indent_size = 4
charset = utf-8


### Naming rules: ###

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case


### Dotnet code style settings: ###

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# require accessibility modifiers
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:refactoring
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:suggestion

# Initializers
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_collection_expression = when_types_loosely_match:warning

# Null checks
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# Tuple Naming
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# Assignments
dotnet_style_prefer_conditional_expression_over_assignment = true:error
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_prefer_compound_assignment = true:warning

# Parenthesis
dotnet_code_quality_unused_parameters = all:suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Miscellaneous
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning
dotnet_style_namespace_match_folder = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_readonly_field = true:warning

# New-line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false:warning
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false:warning

# Build scripts
[*.{yml,yaml}]
indent_style = spaces
indent_size = 2

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj,props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Code files
[*.cs]

## C# style settings:

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer local method constructs to have a block body
csharp_style_expression_bodied_local_functions = true:suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = when_multiline:silent
csharp_preserve_single_line_blocks = true:silent
csharp_preserve_single_line_statements = true:silent

# Pattern Matching
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_extended_property_pattern = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning

# Namespace
csharp_style_namespace_declarations = file_scoped:error
csharp_using_directive_placement = outside_namespace:warning

# Suggest more modern language features when available
csharp_prefer_simple_default_expression = true:warning
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_static_local_function = true:suggestion
csharp_style_conditional_delegate_call = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_inlined_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_primary_constructors = true:warning
csharp_style_prefer_range_operator = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_prefer_switch_expression = true:warning
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:warning

# New Lines
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent


# Style Analytics
dotnet_analyzer_diagnostic.category-Style.severity = warning
dotnet_analyzer_diagnostic.category-Globalization.severity = error

dotnet_diagnostic.IDE0011.severity = silent				# IDE0011: Add braces
dotnet_diagnostic.IDE0046.severity = silent				# IDE0046: Convert to conditional expression
dotnet_diagnostic.IDE0043.severity = error	            # IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0051.severity = warning            # IDE0051: Remove unused private member
dotnet_diagnostic.IDE0052.severity = warning            # IDE0052: Remove unread private member
dotnet_diagnostic.IDE0076.severity = warning            # IDE0076: Remove invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0305.severity = none				# IDE0305: Simplify collection initialization

# XML Documentation
dotnet_diagnostic.CS0105.severity = error               # CS0105: Using directive is unnecessary.
dotnet_diagnostic.CS1573.severity = error               # CS1573: Missing XML comment for parameter
dotnet_diagnostic.CS1591.severity = error               # CS1591: Missing XML comment for publicly visible type or member
dotnet_diagnostic.CS1712.severity = error               # CS1712: Type parameter has no matching typeparam tag in the XML comment (but other type parameters do)

# Async
dotnet_diagnostic.CS1998.severity = error               # CS1998: Async method lacks 'await' operators and will run synchronously
dotnet_diagnostic.CS4014.severity = error               # CS4014: Because this call is not awaited, execution of the current method continues before the call is completed

# Dispose things need disposing
dotnet_diagnostic.CA2000.severity = error               # CA2000: Dispose objects before losing scope

# Overly strict checks
dotnet_diagnostic.CA2007.severity = none                # CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA5394.severity = none                # CA5394: Random is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.

# Public API Documentation
dotnet_diagnostic.RS0016.severity = error				# RS0016: Add public types and members to the declared API
dotnet_diagnostic.RS0017.severity = error				# RS0017: Remove deleted types and members from the declared API
# false positive for SuperLinq.Async CancellationTokens
dotnet_diagnostic.RS0026.severity = none				# RS0026: Do not add multiple public overloads with optional parameters

# Bug in compiler
dotnet_diagnostic.CA1861.severity = none				# CA1861: Avoid constant arrays as arguments

# Primary Constructors
dotnet_diagnostic.CS9107.severity = error				# CS9107: Parameter is captured into the state of the enclosing type and its value is also passed to the base constructor
dotnet_diagnostic.CS9113.severity = error				# CS9113: Your class never references the primary constructor
dotnet_diagnostic.CS9124.severity = error				# CS9124: Parameter is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event
dotnet_diagnostic.CS9179.severity = error				# CS9179: Primary constructor parameter is shadowed by a member from base

# Regex (can't use generated regex on pre-net7)
dotnet_diagnostic.SYSLIB1045.severity = none            # SYSLIB1045: Use GeneratedRegexAttribute to generate the regular expression implementation at compile time.

# Miscellaneous analyzers
dotnet_diagnostic.CA1051.severity = error				# CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1307.severity = error				# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1507.severity = warning				# CA1507: Use `nameof` in place of string
dotnet_diagnostic.CA1510.severity = error				# CA1510: Use `ArgumentNullException` throw helper
dotnet_diagnostic.CA1511.severity = error				# CA1511: Use `ArgumentException` throw helper
dotnet_diagnostic.CA1512.severity = error				# CA1512: Use `ArgumentOutOfRangeException` throw helper
dotnet_diagnostic.CA1513.severity = error				# CA1513: Use `ObjectDisposedException` throw helper
dotnet_diagnostic.CA1822.severity = warning				# CA1822: Mark members as static
dotnet_diagnostic.CA1825.severity = error				# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1826.severity = warning				# CA1826: Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1827.severity = warning				# CA1827: Do not use Count()/LongCount() when Any() can be used
dotnet_diagnostic.CA1828.severity = warning				# CA1828: Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1829.severity = warning				# CA1829: Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1841.severity = error				# CA1841: Prefer Dictionary Contains methods
dotnet_diagnostic.CA1845.severity = warning				# CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1852.severity = warning				# CA1852: CA1852: Seal internal types
dotnet_diagnostic.CA1853.severity = warning				# CA1853: Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1854.severity = warning				# CA1854: Prefer the IDictionary.TryGetValue(TKey, out TValue) method
dotnet_diagnostic.CA1862.severity = warning				# CA1862: Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1863.severity = warning				# CA1863: Use 'CompositeFormat'
dotnet_diagnostic.CA1864.severity = warning				# CA1864: Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1868.severity = warning				# CA1868: Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA2014.severity = error				# CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2016.severity = error				# CA2016: Forward the CancellationToken parameter to methods that take one
